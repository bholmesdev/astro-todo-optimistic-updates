---
import Card from "../components/Card.astro";
import Layout from "../layouts/Layout.astro";
import { todos } from "../store";

let todo: string | undefined;

if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  const todoData = formData.get("todo");
  if (typeof todoData === "string") {
    todo = todoData;
    await new Promise((resolve) => setTimeout(resolve, 1000));
    todos.push(todo);
  }
}
---

<Layout title="Welcome to Astro.">
  <main
    x-data={`form()`}
    x-init=`$store.optimisticTodos = $store.optimisticTodos.filter((t) => t !== ${JSON.stringify(todo)});`
  >
    <h1>Welcome to <span class="text-gradient">Astro</span></h1>
    <form
      transition:persist
      method="POST"
      @submit.prevent=`submit`
      data-astro-reload
    >
      <input
        class="bg-gray-950"
        name="todo"
        type="text"
        placeholder="Add a todo"
      />
      <button type="submit">Add</button>
    </form>
    <ul class="flex flex-col gap-3">
      <template x-for="todo in $store.optimisticTodos">
        <Card :style={`{viewTransitionName: todo}`} class="opacity-50">
          <p x-text="todo" slot="body"></p>
        </Card>
      </template>
      {
        todos.map((todo) => (
          <Card style={`view-transition-name: ${todo}`}>
            <p slot="body">{todo}</p>
          </Card>
        ))
      }
    </ul>
  </main>
</Layout>

<script>
  import Alpine from "alpinejs";
  import { navigate } from "astro:transitions/client";

  Alpine.store("optimisticTodos", []);

  Alpine.data("form", () => {
    return {
      submit() {
        const formEl = this.$el as HTMLFormElement;
        const formData = new FormData(formEl);
        const todo = formData.get("todo");
        if (typeof todo === "string") {
          this.$store.optimisticTodos = [...this.$store.optimisticTodos, todo];
          formEl.reset();
          navigate(location.pathname, { formData });
        }
      },
    };
  });
</script>

<style>
  main {
    margin: auto;
    padding: 1rem;
    width: 800px;
    max-width: calc(100% - 2rem);
    color: white;
    font-size: 20px;
    line-height: 1.6;
  }
  h1 {
    font-size: 4rem;
    font-weight: 700;
    line-height: 1;
    text-align: center;
    margin-bottom: 1em;
  }
  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }
  .instructions {
    margin-bottom: 2rem;
    border: 1px solid rgba(var(--accent-light), 25%);
    background: linear-gradient(
      rgba(var(--accent-dark), 66%),
      rgba(var(--accent-dark), 33%)
    );
    padding: 1.5rem;
    border-radius: 8px;
  }
  .instructions code {
    font-size: 0.8em;
    font-weight: bold;
    background: rgba(var(--accent-light), 12%);
    color: rgb(var(--accent-light));
    border-radius: 4px;
    padding: 0.3em 0.4em;
  }
  .instructions strong {
    color: rgb(var(--accent-light));
  }
  .link-card-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
    gap: 2rem;
    padding: 0;
  }
</style>
